/*
dco/c++ v3.4.1
  - Algorithmic Differentiation by Operator Overloading in C++

COPYRIGHT
The Numerical Algorithms Group Limited and
Software and Tools for Computational Engineering @ RWTH Aachen University, 2017

This file is part of dco/c++.


*/

//*** This file is generated by the cmake build system. Do not change
//*** in source.
#pragma once
#include <string>

#define DCO_VERSION_SHORT 3.4
#define DCO_VERSION 3.4.1
#define DCO_BRANCH 3.4.1
#define DCO_COMPATIBILITY_VERSION 32201

namespace dco {
template <int>
  struct build_info_t {
  static const std::string VERSION, VERSION_SHORT, BRANCH;
  static const int COMPATIBILITY_VERSION;
};
template <int T> const std::string build_info_t<T>::VERSION = "3.4.1";
template <int T> const std::string build_info_t<T>::VERSION_SHORT = "3.4";
template <int T> const std::string build_info_t<T>::BRANCH = "3.4.1";
template <int T> const int build_info_t<T>::COMPATIBILITY_VERSION = T;
typedef build_info_t<DCO_COMPATIBILITY_VERSION> build_info;
}


